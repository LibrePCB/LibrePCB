import { Globals, Tab } from "./globals.slint";
export component WindowSection inherits Rectangle {
    in property <int> group;
    in property <[Tab]> tabs;
    in property <image> scene-image <=> scene.source;

    out property <length> scene-width: scene.width;
    out property <length> scene-height: scene.height;

    //callback scene-resized(length, length);

    //init => {
    //    scene-resized(scene.width, scene.height);
    //}

    VerticalLayout {
        tabBar := Rectangle {
            height: 30px;
            background: #353535;

            HorizontalLayout {
                property <int> current_index: 0;

                alignment: LayoutAlignment.start;

                for tab[index] in tabs: Rectangle {
                    width: tabText.preferred-width + 30px;
                    background: (index == current_index) ? #505050 : (tabArea.has-hover ? #404040 : #303030);

                    tabText := Text {
                        x: 7px;
                        text: tab.title;
                        color: (index == current_index) ? white : #a0a0a0;
                    }

                    tabArea := TouchArea {
                        clicked => {
                            current_index = index;
                        }
                    }

                    btnClose := Rectangle {
                        x: tabText.x + tabText.width + 4px;
                        width: icon.width;
                        height: icon.height;
                        background: btnArea.has-hover ? #454545 : transparent;
                        border-radius: 3px;

                        icon := Image {
                            source: @image-url("img/close.svg");
                            colorize: tabText.color;
                        }

                        btnArea := TouchArea { }
                    }
                }
            }
        }

        scene := Image {
            TouchArea {
                pointer-event(e) => {
                    return Globals.scene-pointer_event(group, self.mouse-x, self.mouse-y, self.pressed-x, self.pressed-y, e);
                }
                scroll-event(e) => {
                    return Globals.scene-scrolled(group, self.mouse-x, self.mouse-y, e);
                }
            }
        }
    }
}
