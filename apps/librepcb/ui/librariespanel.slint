import { CheckBox, Button, ListView, ProgressIndicator, Spinner, HorizontalBox, VerticalBox, StandardButton } from "std-widgets.slint";
import { Globals, Library, LibraryType, LibraryState } from "./globals.slint";

component LibraryList inherits ListView {
    property <int> current-index: -1;
    property <length> item-height: 50px;
    in-out property <[Library]> model;

    preferred-height: model.length * item-height;

    for lib[index] in model: Rectangle {
        width: parent.width;
        height: item-height;
        background: (current-index == index) ? #454545 : (touch.has-hover ? #383838 : transparent);

        touch := TouchArea {
            property <bool> buttons-visible: self.has-hover || (current-index == index);
            property <bool> installable: (lib.type == LibraryType.online);
            property <bool> updatable: (lib.type == LibraryType.remote) && (lib.state == LibraryState.outdated);

            clicked => {
                current-index = index;
            }

            HorizontalLayout {
                padding: 2px;
                padding-right: 10px;

                Image {
                    width: parent.height - 6px;
                    height: parent.height - 6px;
                    source: lib.icon;
                }

                VerticalLayout {
                    padding: 3px;

                    HorizontalLayout {
                        vertical-stretch: 0;

                        Text {
                            color: #dddddd;
                            font-size: 13px;
                            font-weight: 700;
                            overflow: TextOverflow.elide;
                            text: lib.name;
                        }

                        if lib.type != LibraryType.online: Rectangle {
                            width: lblVersion.preferred-width + 10px;
                            height: lblVersion.preferred-height + 2px;
                            background: (lib.state == LibraryState.up-to-date) ? #006600 : ((lib.state == LibraryState.outdated) ? #aa0000 : #505050);
                            border-radius: self.height / 2;
                            lblVersion := Text {
                                color: white;
                                font-size: 10px;
                                text: lib.version + ((lib.type == LibraryType.local) ? " | local" : " | remote");
                            }
                        }
                    }

                    HorizontalLayout {
                        spacing: 5px;

                        Text {
                            vertical-alignment: TextVerticalAlignment.center;
                            color: #dddddd;
                            font-size: 10px;
                            font-weight: 200;
                            overflow: TextOverflow.elide;
                            text: lib.description;
                            wrap: TextWrap.word-wrap;
                        }

                        Button {
                            y: (parent.height - self.height) / 2;
                            width: self.visible ? self.preferred-width : 0px;
                            height: 26px;
                            icon: @image-url("img/delete.svg");
                            // TODO: https://github.com/slint-ui/slint/issues/6426
                            visible: buttons-visible && (lib.type != LibraryType.online);
                            clicked => {
                                uninstallPopup.show();
                            }
                        }

                        if updatable || installable: CheckBox {
                            checked: lib.checked;
                            toggled => {
                                lib.checked = self.checked;
                            }
                        }
                    }

                    if lib.progress > 0: ProgressIndicator {
                        vertical-stretch: 0;
                        progress: lib.progress / 100;
                    }
                }
            }

            uninstallPopup := PopupWindow {
                Rectangle {
                    background: #790000;

                    VerticalBox {
                        Text {
                            font-size: 14px;
                            font-weight: 900;
                            text: @tr("Attention! This will remove the whole library directory and is not reversible:");
                        }

                        Text {
                            font-family: "monospace";
                            text: lib.id;
                        }

                        Text {
                            text: @tr("Are you really sure to remove '{0}'?", lib.name);
                        }

                        HorizontalBox {
                            alignment: LayoutAlignment.center;
                            StandardButton {
                                kind: yes;
                                clicked => {
                                    Globals.uninstall-library(lib.id);
                                }
                            }

                            StandardButton {
                                kind: cancel;
                            }
                        }
                    }
                }

                x: root.width;
                y: item-height / 2 - self.height / 2;
            }
        }
    }
}

export component LibrariesPanel inherits Rectangle {
    background: #2a2a2a;

    init => {
        Globals.ensure-libraries-populated();
    }

    VerticalLayout {
        padding-top: 5px;
        alignment: LayoutAlignment.start;

        HorizontalLayout {
            padding-left: 5px;
            padding-right: 5px;
            txt := Text {
                height: self.preferred-height;
                font-weight: 700;
                text: @tr("LIBRARIES");
            }

            if Globals.refreshing-available-libraries: Spinner {
                width: txt.height;
                height: txt.height;
                indeterminate: true;
            }
        }

        Rectangle {
            height: 1px;
            background: #555555;
        }

        LibraryList {
            model: Globals.libraries;
            vertical-stretch: 0;
        }

        if Globals.installable-libraries > 0: Button {
            text: @tr("Install/update");
            clicked => {
                Globals.install-checked-libraries();
            }
        }
    }
}
