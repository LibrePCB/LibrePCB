import { Button, ListView, ProgressIndicator, Spinner } from "std-widgets.slint";
import { Globals, Library, LibraryType, LibraryState } from "./globals.slint";

component LibraryList inherits ListView {
    property <int> current-index: -1;
    property <length> item-height: 50px;
    in property <bool> show-version: false;
    in property <bool> installed: false;
    in-out property <[Library]> model;

    preferred-height: model.length * item-height;

    for lib[index] in model: Rectangle {
        width: parent.width;
        height: item-height;
        background: (current-index == index) ? #454545 : (touch.has-hover ? #383838 : transparent);

        HorizontalLayout {
            padding: 2px;

            Image {
                width: parent.height - 6px;
                height: parent.height - 6px;
                source: lib.icon;
            }

            VerticalLayout {
                padding: 3px;

                HorizontalLayout {
                    vertical-stretch: 0;

                    Text {
                        color: #dddddd;
                        font-size: 13px;
                        font-weight: 700;
                        overflow: TextOverflow.elide;
                        text: lib.name;
                    }

                    if show-version: Rectangle {
                        width: lblVersion.preferred-width + 10px;
                        height: lblVersion.preferred-height + 2px;
                        background: (lib.state == LibraryState.up-to-date) ? #006600 : ((lib.state == LibraryState.outdated) ? #aa0000 : black);
                        border-radius: self.height / 2;
                        lblVersion := Text {
                            color: white;
                            font-size: 10px;
                            text: (lib.type == LibraryType.local) ? ("local | " + lib.version) : lib.version;
                        }
                    }
                }

                Text {
                    vertical-alignment: TextVerticalAlignment.center;
                    color: #dddddd;
                    font-size: 10px;
                    font-weight: 200;
                    overflow: TextOverflow.elide;
                    text: lib.description;
                    wrap: TextWrap.word-wrap;
                }

                if lib.progress > 0: ProgressIndicator {
                    vertical-stretch: 0;
                    progress: lib.progress;
                }
            }
        }

        touch := TouchArea {
            property <bool> buttons-visible: self.has-hover || (current-index == index);
            property <bool> installable: buttons-visible && (lib.progress == 0) && ((!installed) || ((lib.type == LibraryType.remote) && (lib.state == LibraryState.outdated)));
            property <bool> uninstallable: buttons-visible && installed;

            clicked => {
                current-index = index;
            }

            if installable: Button {
                x: parent.width - self.width - 7px - (uninstallable ? (self.width + 7px) : 0px);
                y: parent.height - self.height - 2px;
                height: 26px;
                icon: @image-url("img/download.svg");
                clicked => {
                    Globals.install-library(lib.id);
                }
            }

            if uninstallable: Button {
                x: parent.width - self.width - 7px;
                y: parent.height - self.height - 2px;
                height: 26px;
                icon: @image-url("img/delete.svg");
                clicked => {
                    uninstallPopup.show();
                    //Globals.uninstall-library(lib.id);
                }
            }

            uninstallPopup := PopupWindow {
                Rectangle {
                    height: 100%;
                    width: 100%;
                    background: gray;
                    Text {
                        text: "Foo";
                    }
                }

                x: 0;
                y: 0;
                width: 100px;
                height: 100px;
            }
        }
    }
}

export component LibrariesPanel inherits Rectangle {
    background: #2a2a2a;

    init => {
        Globals.ensure-libraries-populated();
    }

    VerticalLayout {
        padding-top: 5px;

        Text {
            x: 5px;
            width: root.width;
            height: self.preferred-height;
            font-weight: 700;
            text: @tr("INSTALLED");
        }

        Rectangle {
            height: 1px;
            background: #555555;
        }

        LibraryList {
            installed: true;
            show-version: true;
            vertical-stretch: 0;
            model: Globals.installed-libraries;
        }

        Button {
            x: 8px;
            width: parent.width - 16px;
            text: @tr("Update all");
        }

        Rectangle { }

        HorizontalLayout {
            padding-left: 5px;
            padding-right: 5px;
            txt := Text {
                height: self.preferred-height;
                font-weight: 700;
                text: @tr("AVAILABLE");
            }

            if Globals.refreshing-available-libraries: Spinner {
                width: txt.height;
                height: txt.height;
                indeterminate: true;
            }
        }

        Rectangle {
            height: 1px;
            background: #555555;
        }

        LibraryList {
            vertical-stretch: 0;
            installed: false;
            model: Globals.available-libraries;
        }

        if Globals.available-libraries.length > 0: Button {
            x: 8px;
            width: parent.width - 16px;
            text: @tr("Install all");
        }

        Rectangle { }
    }
}
