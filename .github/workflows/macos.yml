on:
  workflow_call:

jobs:
  macos-arm64:
    name: MacOS ARM64
    # Make sure the 'runs-on' really refers to an Apple Silicon CPU:
    # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners
    runs-on: macos-14
    env:
      OS: 'mac'
      ARCH: 'arm64'
      COPYFILE_DISABLE: 1 # Stop creating shit files (https://superuser.com/questions/259703/get-mac-tar-to-stop-putting-filenames-in-tar-archives)
      HOMEBREW_NO_INSTALL_CLEANUP: 1 # Might speed up homebrew commands(?)
      CCACHE_DIR: '/Users/runner/ccache-dir'
      CARGO_HOME: '/Users/runner/cargo-home'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Print Environment
        run: ./ci/print_environment.sh
      - name: Install Dependencies
        run: |
          source ./ci/install_dependencies.sh
          # Pass modified PATH to following steps:
          echo "$PATH" > "$GITHUB_PATH"
        env:
          SLINT_UI_TESTING_AUTH: ${{ secrets.SLINT_UI_TESTING_AUTH }}
      # caching --->
      - name: Cache .ccache
        uses: actions/cache@v4
        with:
          key: ${{ github.job }}-${{ github.ref }}
          restore-keys: ${{ github.job }}-refs/heads/master
          path: ${{ env.CCACHE_DIR }}
      - name: Cache .cargo
        uses: actions/cache@v4
        with:
          key: ${{ github.job }}-${{ hashFiles('libs/librepcb/**/Cargo.lock') }}-${{ github.ref }}
          restore-keys: ${{ github.job }}-${{ hashFiles('libs/librepcb/**/Cargo.lock') }}-refs/heads/master
          path: |
            ${{ env.CARGO_HOME }}/bin/
            ${{ env.CARGO_HOME }}/registry/index/
            ${{ env.CARGO_HOME }}/registry/cache/
            ${{ env.CARGO_HOME }}/git/db/
            ./build/cargo/
            ./libs/librepcb/rust-core/target/
      # <--- caching
      - name: Print New Environment
        run: ./ci/print_environment.sh
      - name: Build LibrePCB
        run: ./ci/build_librepcb.sh
      - name: Build Bundle
        run: ./ci/build_mac_bundle.sh
      - name: Run rust-core tests
        run: cd libs/librepcb/rust-core && cargo test --features=fail-on-warnings
      - name: Run LibrePCB Unittests
        run: ./build/tests/unittests/librepcb-unittests
      - name: Run LibrePCB-CLI Functional Tests
        run: uv --directory ./tests/cli run --no-dev pytest -vvv --librepcb-executable="../../build/install/LibrePCB.app/Contents/MacOS/librepcb-cli"
      # Note: Functional tests need to be run with the non-bundled app,
      # otherwise we get errors due to multiple definitions of Qt symbols.
      - name: Run LibrePCB Functional Tests
        run: uv --directory ./tests/funq run --no-dev pytest -vvv --librepcb-executable="../../build/install/bin/librepcb.app/Contents/MacOS/librepcb" --reruns 5 --reruns-delay 10
      - name: Run LibrePCB UI Tests
        if: ${{ success() && env.SLINT_UI_TESTING_AUTH }}
        run: uv --directory ./tests/ui run --no-dev pytest -vvv --librepcb-executable="../../build/install/bin/librepcb.app/Contents/MacOS/librepcb"
        env:
          SLINT_UI_TESTING_AUTH: ${{ secrets.SLINT_UI_TESTING_AUTH }}
      - name: Tar & Upload Artifacts
        if: ${{ success() && (github.event_name == 'push') && env.UPLOAD_URL }}
        run: |
          ./ci/tar_artifacts.sh
          ./ci/upload_artifacts.sh
        env:
          UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
          UPLOAD_USER: ${{ secrets.UPLOAD_USER }}
          UPLOAD_PASS: ${{ secrets.UPLOAD_PASS }}
          UPLOAD_SIGN_KEY: ${{ secrets.UPLOAD_SIGN_KEY }}
