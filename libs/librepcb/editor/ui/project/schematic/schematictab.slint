import { DrawWireToolBar } from "drawwiretoolbar.slint";
import { DrawPolygonToolBar } from "drawpolygontoolbar.slint";
import { AddTextToolBar } from "addtexttoolbar.slint";
import { AddComponentToolBar } from "addcomponenttoolbar.slint";
import { Tab } from "../../tab.slint";
import {
    Button,
    LinkText,
    MessageBox,
    SceneButton,
    ToolButton,
} from "../../widgets.slint";
import {
    Backend,
    Constants,
    Data,
    DismissableMessageAction,
    EditorCommandSet as Cmd,
    EditorTool,
    PanelPage,
    ProjectData,
    SchematicTabData,
    TabAction,
    WindowSectionData,
} from "../../api.slint";

export component SchematicTab inherits Tab {
    in property <int> section-index;
    in-out property <WindowSectionData> section;
    property <[SchematicTabData]> tabs: section.schematic-tabs;
    property <int> index: section.current-tab-index;
    property <ProjectData> project: Data.projects[tabs[index].project-index];
    property <length> toolbar-space: view-buttons-l.x - toolbuttons-l.x - toolbuttons-l.width - 10px;
    property <length> toolbutton-offset-y: (toolbar-r.width > toolbar-space) ? toolbar-r.height : 0;
    property <EditorTool> tool: tabs[index].tool;

    function tool-triggered(action: TabAction) {
        Data.set-current-tab(section-index, index);
        Backend.trigger-tab(section-index, index, action);
    }

    enabled: true;

    changed absolute-position => {
        tabs[index].scene-image-pos = self.absolute-position;
    }

    // When the tool changes, move focus to scene to make tabulator & escape
    // working correctly.
    changed tool => {
        root.focus();
    }

    init => {
        tabs[index].scene-image-pos = self.absolute-position;
    }

    if Data.preview-mode: Rectangle {
        background: white;
    }

    img := Image {
        image-fit: preserve;
        image-rendering: pixelated;
        source: Backend.render-scene(section-index, root.width, root.height, 0, tabs[index].frame);
        accessible-role: none;
    }

    // Show overlay, if text is not empty.
    if !tabs[index].tool-overlay-text.is-empty: Rectangle {
        x: 2 * toolbuttons-l.x + toolbuttons-l.width;
        y: toolbuttons-l.y;
        width: overlay-txt.preferred-width + 2 * overlay-txt.x;
        height: overlay-txt.preferred-height + 2 * overlay-txt.y;
        background: tabs[index].overlay-color;
        border-radius: 10px;
        border-width: 1px;
        border-color: tabs[index].overlay-text-color;

        overlay-txt := Text {
            x: 8px;
            y: 8px;
            horizontal-alignment: left;
            vertical-alignment: top;
            font-family: "Noto Sans Mono";
            color: tabs[index].overlay-text-color;
            text: tabs[index].tool-overlay-text;
        }
    }

    ta := TouchArea {
        mouse-cursor: tabs[index].tool-cursor;

        toolbar-r := Rectangle {
            y: 0;
            width: min(self.preferred-width, root.width - 10px);
            height: 34px;
            background: #505050;
            border-bottom-left-radius: 11px;
            border-bottom-right-radius: 11px;
            visible: self.width > 30px;

            HorizontalLayout {
                alignment: center;
                padding: 3px;

                if tabs[index].tool == EditorTool.wire: wire-toolbar := DrawWireToolBar {
                    section-index: section-index;
                    section: section;
                }

                if tabs[index].tool == EditorTool.polygon: polygon-toolbar := DrawPolygonToolBar {
                    section-index: section-index;
                    section: section;
                }

                if tabs[index].tool == EditorTool.text: text-toolbar := AddTextToolBar {
                    section-index: section-index;
                    section: section;
                }

                if tabs[index].tool == EditorTool.component: component-toolbar := AddComponentToolBar {
                    section-index: section-index;
                    section: section;
                }
            }
        }

        if tabs[index].tool == EditorTool.select: VerticalLayout {
            width: min(self.preferred-width, 0.7 * parent.width, 550px);
            padding: 20px;
            spacing: 10px;

            if tabs[index].install-libraries-msg.visible: install-libraries-msg := MessageBox {
                title: @tr("No Libraries Installed");
                supports-dont-show-again: tabs[index].install-libraries-msg.supports-dont-show-again;

                Text {
                    wrap: word-wrap;
                    color: parent.text-color;
                    text: @tr("In order to add components to this schematic, you first need to install some part libraries or create parts by yourself in your own library.");
                }

                install-libraries-btn := Button {
                    primary: true;
                    text: @tr("Install Libraries");

                    clicked => {
                        Data.panel-page = PanelPage.libraries;
                    }
                }

                HorizontalLayout {
                    alignment: start;

                    install-libraries-help-btn := LinkText {
                        text-color: install-libraries-msg.text-color;
                        text-color-hovered: install-libraries-msg.hover-color;
                        wrap: word-wrap;
                        text: "▸ " + @tr("Learn how to create parts by yourself");
                        status-tip: Constants.user-manual-create-local-library-url;

                        clicked => {
                            Backend.open-url(self.status-tip);
                        }
                    }
                }

                dismiss-clicked => {
                    tabs[index].install-libraries-msg.action = DismissableMessageAction.dismiss;
                }

                dont-show-again-clicked => {
                    tabs[index].install-libraries-msg.action = DismissableMessageAction.dont-show-again;
                }
            }

            if tabs[index].add-drawing-frame-msg.visible: add-drawing-frame-msg := MessageBox {
                title: @tr("Get Started");
                supports-dont-show-again: tabs[index].add-drawing-frame-msg.supports-dont-show-again;

                Text {
                    wrap: word-wrap;
                    color: parent.text-color;
                    text: @tr("It's recommended to start a new schematic with adding a drawing frame to it. Then add other components the usual way with the toolbar at the left.");
                }

                add-drawing-frame-btn := Button {
                    primary: true;
                    text: @tr("Add Drawing Frame");

                    clicked => {
                        tool-triggered(TabAction.tool-component-frame);
                    }
                }

                HorizontalLayout {
                    alignment: start;

                    add-drawing-frame-help-btn := LinkText {
                        text-color: add-drawing-frame-msg.text-color;
                        text-color-hovered: add-drawing-frame-msg.hover-color;
                        wrap: word-wrap;
                        text: "▸ " + @tr("Learn how to create schematics");
                        status-tip: Constants.user-manual-create-schematics-url;

                        clicked => {
                            Backend.open-url(self.status-tip);
                        }
                    }
                }

                dismiss-clicked => {
                    tabs[index].add-drawing-frame-msg.action = DismissableMessageAction.dismiss;
                }

                dont-show-again-clicked => {
                    tabs[index].add-drawing-frame-msg.action = DismissableMessageAction.dont-show-again;
                }
            }
        }

        toolbuttons-l := VerticalLayout {
            x: 7px;
            y: 7px + toolbutton-offset-y;
            width: self.preferred-width;
            height: parent.height - 2 * self.y;
            spacing: 5px;

            tool-select-btn := ToolButton {
                cmd: Cmd.tool-select;
                checked: tabs[index].tool == EditorTool.select;

                clicked => {
                    tool-triggered(TabAction.tool-select);
                }
            }

            tool-wire-btn := ToolButton {
                cmd: Cmd.tool-wire;
                icon: @image-url("../../../../../../img/actions/draw_wire.png");
                checked: tabs[index].tool == EditorTool.wire;

                clicked => {
                    tool-triggered(TabAction.tool-wire);
                }
            }

            tool-netlabel-btn := ToolButton {
                cmd: Cmd.tool-netlabel;
                checked: tabs[index].tool == EditorTool.netlabel;

                clicked => {
                    tool-triggered(TabAction.tool-netlabel);
                }
            }

            tool-polygon-btn := ToolButton {
                cmd: Cmd.tool-polygon;
                checked: tabs[index].tool == EditorTool.polygon;

                clicked => {
                    tool-triggered(TabAction.tool-polygon);
                }
            }

            tool-text-btn := ToolButton {
                cmd: Cmd.tool-text;
                checked: tabs[index].tool == EditorTool.text;

                clicked => {
                    tool-triggered(TabAction.tool-text);
                }
            }

            tool-image-btn := ToolButton {
                cmd: Cmd.tool-image;
                checked: tabs[index].tool == EditorTool.image;

                clicked => {
                    tool-triggered(TabAction.tool-image);
                }
            }

            tool-component-btn := ToolButton {
                cmd: Cmd.tool-component;
                checked: tabs[index].tool == EditorTool.component;

                clicked => {
                    tool-triggered(TabAction.tool-component);
                }

                if Data.workspace-contains-standard-components: VerticalLayout {
                    tool-resistor-btn := ToolButton {
                        cmd: Cmd.component-resistor;
                        icon: {
                            if project.ieee315-symbols {
                                @image-url("../../../../../../img/resistor-us.svg")
                            } else {
                                @image-url("../../../../../../img/resistor-eu.svg")
                            }
                        }
                        clicked => {
                            tool-triggered(TabAction.tool-component-resistor);
                        }
                    }

                    tool-inductor-btn := ToolButton {
                        cmd: Cmd.component-inductor;
                        icon: {
                            if project.ieee315-symbols {
                                @image-url("../../../../../../img/inductor-us.svg")
                            } else {
                                @image-url("../../../../../../img/inductor-eu.svg")
                            }
                        }
                        clicked => {
                            tool-triggered(TabAction.tool-component-inductor);
                        }
                    }

                    tool-bipolar-btn := ToolButton {
                        cmd: Cmd.component-capacitor-bipolar;
                        icon: {
                            if project.ieee315-symbols {
                                @image-url("../../../../../../img/capacitor-bipolar-us.svg")
                            } else {
                                @image-url("../../../../../../img/capacitor-bipolar-eu.svg")
                            }
                        }
                        clicked => {
                            tool-triggered(TabAction.tool-component-capacitor-bipolar);
                        }
                    }

                    tool-unipolar-btn := ToolButton {
                        cmd: Cmd.component-capacitor-unipolar;
                        icon: {
                            if project.ieee315-symbols {
                                @image-url("../../../../../../img/capacitor-unipolar-us.svg")
                            } else {
                                @image-url("../../../../../../img/capacitor-unipolar-eu.svg")
                            }
                        }
                        clicked => {
                            tool-triggered(TabAction.tool-component-capacitor-unipolar);
                        }
                    }

                    tool-vcc-btn := ToolButton {
                        cmd: Cmd.component-vcc;
                        icon: @image-url("../../../../../../img/vcc.svg");

                        clicked => {
                            tool-triggered(TabAction.tool-component-vcc);
                        }
                    }

                    tool-gnd-btn := ToolButton {
                        cmd: Cmd.component-gnd;
                        icon: @image-url("../../../../../../img/gnd.svg");

                        clicked => {
                            tool-triggered(TabAction.tool-component-gnd);
                        }
                    }
                }
            }

            tool-measure-btn := ToolButton {
                cmd: Cmd.tool-measure;
                checked: tabs[index].tool == EditorTool.measure;

                clicked => {
                    tool-triggered(TabAction.tool-measure);
                }
            }
        }

        view-buttons-l := VerticalLayout {
            x: parent.width - self.preferred-width - 7px;
            y: toolbutton-offset-y + 7px;
            width: self.preferred-width;

            zoom-fit-btn := SceneButton {
                icon: @image-url("../../../../../font-awesome/svgs/solid/expand.svg");
                icon-scale: 0.9;
                bg-color: tabs[index].background-color;
                fg-color: tabs[index].foreground-color;

                clicked => {
                    Backend.trigger-tab(section-index, index, TabAction.zoom-fit);
                }
            }

            zoom-in-btn := SceneButton {
                icon: @image-url("../../../../../bootstrap-icons/icons/zoom-in.svg");
                bg-color: tabs[index].background-color;
                fg-color: tabs[index].foreground-color;

                clicked => {
                    Backend.trigger-tab(section-index, index, TabAction.zoom-in);
                }
            }

            zoom-out-btn := SceneButton {
                icon: @image-url("../../../../../bootstrap-icons/icons/zoom-out.svg");
                bg-color: tabs[index].background-color;
                fg-color: tabs[index].foreground-color;

                clicked => {
                    Backend.trigger-tab(section-index, index, TabAction.zoom-out);
                }
            }

            show-pins-btn := SceneButton {
                icon: @image-url("../../../../../bootstrap-icons/icons/123.svg");
                icon-scale: 0.9;
                tooltip: @tr("Pin Numbers");
                bg-color: tabs[index].background-color;
                fg-color: tabs[index].foreground-color;
                style: checkbox;
                checked: tabs[index].show-pin-numbers;

                clicked => {
                    tabs[index].show-pin-numbers = !self.checked;
                }
            }
        }

        pointer-event(event) => {
            if event.kind == PointerEventKind.down {
                Data.set-current-tab(section-index, index);
                if !root.has-focus {
                    root.focus();
                }
            }
            Backend.scene-pointer-event(section-index, self.mouse-x, self.mouse-y, event);
        }

        scroll-event(event) => {
            Backend.scene-scrolled(section-index, self.mouse-x, self.mouse-y, event) ? accept : reject
        }
    }

    focus-gained(reason) => {
        Data.set-current-tab(section-index, index);
    }

    key-pressed(event) => {
        // If the focus is in the command toolbar, make the Escape key moving
        // the focus back to the graphics scene without triggering any action.
        if (event.text == Key.Escape) && (!root.has-focus) {
            root.focus();
            return accept;
        }
        reject
    }

    key-released(event) => {
        Backend.scene-key-event(section-index, event) ? accept : reject
    }
}
