import { Palette, ScrollView } from "std-widgets.slint";
import { IconButton } from "iconbutton.slint";
import { Constants } from "../api.slint";

export component LineEdit inherits Rectangle {
    in-out property <string> text <=> edt.text;
    in property <string> placeholder-text;
    in property <string> validation-error;
    in property <bool> enabled: true;
    in property <bool> read-only: false;
    in property <length> font-size: 13px;

    callback key-pressed <=> edt.key-pressed;

    public function select-all() {
        edt.select-all();
    }

    preferred-width: edt.preferred-width + 16px;
    height: edt.preferred-height + 14px;
    horizontal-stretch: 1;
    background: #202020;
    border-color: {
        if enabled && (!validation-error.is-empty) {
            edt.has-focus ? #ff0000 : #900000
        } else if edt.has-focus {
            Constants.librepcb-color
        } else if enabled {
            #606060
        } else {
            transparent
        }
    }
    border-width: 1px;
    border-radius: 5px;
    forward-focus: edt;

    // Accessibility
    accessible-role: text-input;
    accessible-enabled: enabled;
    accessible-value: edt.text;
    accessible-placeholder-text: placeholder-text;
    accessible-read-only: read-only;
    accessible-action-set-value(t) => {
        edt.text = t;
    }

    if edt.text.is-empty && (!placeholder-text.is-empty): placeholder-txt := Text {
        x: 8px;
        width: root.width - 2 * self.x;
        font-size: font-size;
        color: enabled ? #909090 : #707070;
        text: placeholder-text;
        wrap: no-wrap;
        overflow: elide;
    }

    ta := TouchArea {
        enabled: enabled;

        ScrollView {
            x: 8px;
            y: 1px;
            width: parent.width - 2 * self.x;
            height: parent.height - 2px;
            viewport-width: edt.width;
            viewport-height: edt.height;

            edt := TextInput {
                property <length> y-offset: (self.width > parent.width) ? 3px : 0;

                y: ((parent.height - self.height) / 2) - y-offset;
                width: max(self.preferred-width, root.width - 16px);
                height: self.preferred-height;
                font-size: font-size;
                color: enabled ? Palette.foreground : Palette.foreground.darker(0.5);
                enabled: enabled;
                read-only: read-only;
                single-line: true;
                wrap: no-wrap;
                accessible-role: none;
            }
        }

        if ta.has-hover && (!edt.text.is-empty): IconButton {
            x: root.width - self.width - (root.height - self.height) / 2;
            y: (root.height - self.height) / 2;
            width: 18px;
            height: self.width;
            background-color: root.background;
            border-radius: self.height / 2;
            icon-scale: 0.7;
            icon: @image-url("../../../../font-awesome/svgs/solid/xmark.svg");
            accessible-role: none;

            clicked => {
                edt.text = "";
            }
        }
    }

    if enabled && (!validation-error.is-empty): Rectangle {
        x: root.width - self.width - 20px;
        y: -8px;
        width: min(t-validation-error.preferred-width + 10px, root.width * 0.8);
        height: t-validation-error.preferred-height + 4px;
        background: #101010;
        border-width: 1px;
        border-radius: self.height / 2;
        border-color: root.border-color;

        t-validation-error := Text {
            x: 5px;
            width: parent.width - 10px;
            vertical-alignment: center;
            font-size: 11px;
            overflow: elide;
            color: root.border-color;
            text: validation-error;
            accessible-description: "validation error";
        }
    }
}
