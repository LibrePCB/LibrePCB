import { LibraryRuleCheckLink } from "libraryrulechecklink.slint";
import {
    Button,
    CategoryTreeLabel,
    IconButton,
    LineEdit,
    ListViewItemButton,
    Palette,
    Switch,
} from "../widgets.slint";
import {
    Backend,
    Data,
    LibraryDependency,
    LibraryElementCategoryData,
    PanelPage,
    RuleCheckData,
    TabAction,
} from "../api.slint";

export component IconRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Icon:");
    accessible-role: none;
}

export component IconRowCell inherits HorizontalLayout {
    in property <image> icon;
    in property <bool> read-only: false;
    property <bool> has-icon: icon.width > 0;

    callback clicked <=> btn.clicked;

    alignment: start;
    spacing: 8px;

    btn := IconButton {
        height: 48px;
        style: hyperlink;
        colorize: !has-icon;
        icon-size: has-icon ? 48px : 20px;
        icon: {
            if has-icon {
                root.icon
            } else {
                @image-url("../../../../bootstrap-icons/icons/folder2-open.svg")
            }
        };
        enabled: !read-only;
    }

    if btn.has-hover: Text {
        color: #a0a0a0;
        font-size: 11px;
        vertical-alignment: center;
        overflow: elide;
        text: @tr("Click to change the icon.") + "\n" + @tr("Preferred:") + " PNG, 256x256 px";
        accessible-role: none;
    }
}

export component NameRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Name:");
    accessible-role: none;
}

export component DescriptionRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Description:");
    accessible-role: none;
}

export component KeywordsRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Keywords:");
    accessible-role: none;
}

export component AuthorRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Author:");
    accessible-role: none;
}

export component VersionRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Version:");
    accessible-role: none;
}

export component DeprecatedRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Deprecated:");
    accessible-role: none;
}

export component DeprecatedRowCell inherits Switch {
    font-size: 10px;
    text: @tr("Check this if this library element should no longer be used.");
    accessible-description: self.text;
}

export component UrlRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("URL:");
    accessible-role: none;
}

export component UrlRowCell inherits HorizontalLayout {
    in property <string> url;
    in property <string> url-error;
    in property <string> placeholder-text;
    in property <bool> read-only;
    in property <string> label;

    callback text-edited <=> edt.text-edited;
    callback text-accepted <=> edt.text-accepted;
    callback open-url-clicked(url: string);
    open-url-clicked(url) => {
        Backend.open-url(url);
    }

    spacing: 5px;

    edt := LineEdit {
        text: url;
        validation-error: url-error;
        placeholder-text: placeholder-text;
        read-only: read-only;
        accessible-label: label;
    }

    Rectangle {
        horizontal-stretch: 0;

        open-btn := IconButton {
            height: 16px;
            style: hyperlink;
            status-tip: edt.text;
            icon: @image-url("../../../../font-awesome/svgs/solid/arrow-up-right-from-square.svg");
            enabled: (!edt.text.is-empty) && url-error.is-empty;

            clicked => {
                open-url-clicked(edt.text);
            }
        }
    }
}

export component DependenciesRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Dependencies:");
    accessible-role: none;
}

export component DependenciesRowCell inherits VerticalLayout {
    in-out property <[LibraryDependency]> model;
    in property <bool> read-only: false;

    callback add-dependency-clicked;

    for item[idx] in model: item-ta := TouchArea {
        height: item.checked ? 22px : 0;

        if item.checked: HorizontalLayout {
            padding-left: 3px;
            padding-right: 3px;
            spacing: 5px;
            alignment: start;

            Image {
                y: (parent.height - self.height) / 2;
                width: 18px;
                height: self.width;
                image-fit: contain;
                source: item.icon;
                accessible-role: none;
            }

            item-txt := Text {
                vertical-alignment: center;
                overflow: elide;
                text: item.name.is-empty ? item.uuid : item.name;
                accessible-description: "dependency";
            }

            if (!read-only) && item-ta.has-hover: ListViewItemButton {
                icon: @image-url("../../../../font-awesome/svgs/solid/trash-can.svg");
                icon-size: 14px;

                clicked => {
                    model[idx].checked = false;
                }
            }
        }
    }

    if !read-only: HorizontalLayout {
        height: 22px;
        padding-left: 1px;
        padding-right: 3px;
        spacing: 5px;
        alignment: start;

        add-dependency-btn := IconButton {
            style: hyperlink;
            icon-scale: 0.8;
            icon: @image-url("../../../../bootstrap-icons/icons/plus-circle.svg");
            accessible-label: "add dependency";

            clicked => {
                add-dependency-clicked();
            }
        }

        if add-dependency-btn.has-hover: Text {
            color: #a0a0a0;
            font-size: 11px;
            vertical-alignment: center;
            overflow: elide;
            text: @tr("Add Dependency");
            accessible-role: none;
        }
    }
}

export component ManufacturerRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Manufacturer:");
    accessible-role: none;
}

export component ParentRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Parent:");
    accessible-role: none;
}

export component ParentRowCell inherits HorizontalLayout {
    in property <[string]> model;
    in property <bool> read-only: false;

    callback choose-parent-clicked;

    alignment: start;
    spacing: 5px;

    tree-txt := CategoryTreeLabel {
        names: model;
        accessible-description: "parent category";
    }

    Rectangle {
        width: 20px;
    }

    if !read-only: Rectangle {
        width: 1px;
        background: #707070;
    }

    if !read-only: select-btn := IconButton {
        y: (parent.height - self.height) / 2;
        z: 10;  // For the tooltip.
        height: 18px;
        style: hyperlink;
        icon: @image-url("../../../../bootstrap-icons/icons/folder2-open.svg");
        tooltip: @tr("Choose Parent Category");

        clicked => {
            choose-parent-clicked();
        }
    }
}

export component CategoriesRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Categories:");
    accessible-role: none;
}

component CategoriesListViewRow inherits TouchArea {
    Rectangle {
        height: self.preferred-height;
        background: #393939;
        border-radius: 2px;

        HorizontalLayout {
            padding: 2px;
            padding-left: 4px;
            padding-right: 4px;
            spacing: 5px;

            @children
        }
    }
}

export component CategoriesRowCell inherits HorizontalLayout {
    in-out property <[LibraryElementCategoryData]> model;
    in property <bool> read-only: false;

    callback add-triggered();

    alignment: start;

    // Accessibility
    accessible-role: list;
    accessible-description: "";
    accessible-item-count: model.length;

    VerticalLayout {
        horizontal-stretch: 0;
        spacing: 5px;

        for item[index] in model: item-ta := CategoriesListViewRow {
            enabled: !read-only;

            // Accessibility
            accessible-role: list-item;
            accessible-enabled: self.enabled;
            accessible-label: item-txt.accessible-label;
            accessible-item-index: index;

            item-txt := CategoryTreeLabel {
                names: item.names;
                accessible-role: none;
            }

            if !read-only: Rectangle {
                width: 10px;
                visible: item-ta.has-hover;
            }

            if !read-only: Rectangle {
                width: 1px;
                background: #707070;
                visible: item-ta.has-hover;
            }

            if !read-only: item-remove-btn := IconButton {
                width: 16px;
                style: hyperlink;
                icon: @image-url("../../../../font-awesome/svgs/solid/trash-can.svg");
                visible: item-ta.has-hover;

                clicked => {
                    model[index].delete = true;
                }
            }
        }

        if !read-only: add-ta := CategoriesListViewRow {
            mouse-cursor: pointer;

            // Accessibility
            accessible-role: button;
            accessible-label: add-txt.text;
            accessible-action-default => {
                self.clicked();
            }

            Image {
                width: 16px;
                height: self.width;
                image-fit: contain;
                colorize: add-txt.color;
                source: @image-url("../../../../bootstrap-icons/icons/plus-circle.svg");
                accessible-role: none;
            }

            add-txt := Text {
                color: parent.has-hover ? white : Palette.foreground;
                vertical-alignment: center;
                overflow: elide;
                text: @tr("Add Category");
                accessible-role: none;
            }

            clicked => {
                add-triggered();
            }
        }
    }
}

export component AssemblyTypeRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Assembly:");
    accessible-role: none;
}

export component DatasheetRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Datasheet:");
    accessible-role: none;
}

export component DatasheetRowCell inherits UrlRowCell {
    placeholder-text: @tr("URL to online datasheet (optional)");
}

export component SchematicOnlyRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Schematic-Only:");
    accessible-role: none;
}

export component PrefixRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Prefix:");
    accessible-role: none;
}

export component DefaultValueRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Default Value:");
    accessible-role: none;
}

export component AttributesRowHeader inherits Text {
    width: self.preferred-width;
    vertical-alignment: center;
    text: @tr("Attributes:");
    accessible-role: none;
}

export component MetadataFooterRowCell inherits HorizontalLayout {
    in property <int> section-index;
    in property <int> tab-index;
    in property <bool> wizard-mode: false;
    in property <bool> show-back-button: false;
    in property <bool> unsaved-changes: false;
    in property <RuleCheckData> checks;
    in property <bool> read-only: false;

    alignment: start;
    spacing: 5px;

    if !read-only: save-btn := Button {
        width: max(self.preferred-width, 100px);
        primary: wizard-mode || unsaved-changes;
        icon: {
            if wizard-mode {
                @image-url("../../../../font-awesome/svgs/solid/angle-right.svg")
            } else {
                @image-url("../../../../font-awesome/svgs/solid/check.svg")
            }
        };
        text: wizard-mode ? @tr("Next") : @tr("Save");

        clicked => {
            Backend.trigger-tab(section-index, tab-index, wizard-mode ? TabAction.next : TabAction.save);
        }
    }

    if wizard-mode && show-back-button: back-btn := Button {
        width: max(self.preferred-width, 100px);
        icon: @image-url("../../../../font-awesome/svgs/solid/angle-left.svg");
        text: @tr("Back");

        clicked => {
            Backend.trigger-tab(section-index, tab-index, TabAction.back);
        }
    }

    if !wizard-mode: LibraryRuleCheckLink {
        data: checks;

        clicked => {
            Data.set-current-tab(section-index, tab-index);
            Data.panel-page = PanelPage.rule-check;
        }
    }
}
