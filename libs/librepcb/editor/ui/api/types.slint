// Triggerable actions
export enum Action {
    // Application
    keyboard-shortcuts-reference,
    quit,

    // Window
    window-new,
    window-close,

    // Workspace
    workspace-open-folder,
    workspace-switch,
    workspace-settings,
    workspace-libraries-rescan,

    // Library
    library-create,
    library-download,
    library-panel-ensure-populated,
    library-panel-apply,
    library-panel-cancel,

    // Project
    project-new,
    project-open,
    project-import-examples,
    project-import-eagle,
}

// Pages which can be shown in the side panel
export enum PanelPage {
    home,
    libraries,
    about,
}

// Notification types
export enum NotificationType {
    tip,
    info,
    warning,
    critical,
    progress,
}

// Dynamic information about editor commands, e.g. used in menus
export struct EditorCommand {
    icon: image,
    text: string,
    status-tip: string,
    shortcut: string,
    modifiers: KeyboardModifiers,
    key: string,
}

// All the different kinds of window tabs
export enum TabType {
    home,
    create-library,
    download-library,
}

// Tab actions
export enum TabAction {
    close,
    cancel,
    accept,
}

// Window tab base data
//
// For various kinds of tabs, an additional "derived" data structure is
// defined, see below.
export struct TabData {
    type: TabType,
    title: string,
}

// Additional data for "create library" tabs
export struct CreateLibraryTabData {
    name: string,
    name-error: string,
    description: string,
    author: string,
    version: string,
    version-default: string,
    version-error: string,
    url: string,
    url-error: string,
    cc0: bool,
    directory: string,
    directory-default: string,
    directory-error: string,
    valid: bool,
    creation-error: string,
}

// Additional data for "download library" tabs
export struct DownloadLibraryTabData {
    url: string,
    url-error: string,
    url-suggestion: string,
    directory: string,
    directory-default: string,
    directory-error: string,
    valid: bool,
    download-running: bool,
    download-progress: int,
    download-status: string,  // Status or error
}

// Window section actions
export enum WindowSectionAction {
    split,
    close,
}

// Window section data structure
export struct WindowSectionData {
    tabs: [TabData],
    create-library-tabs: [CreateLibraryTabData],  // Proxy view for `tabs`
    download-library-tabs: [DownloadLibraryTabData],  // Proxy view for `tabs`
    current-tab-index: int,
    highlight: bool,
}

// Notification data structure
export struct NotificationData {
    type: NotificationType,
    title: string,
    description: string,
    button-text: string,  // Optional (empty = no button)
    progress: int,  // [%], ignored if type is not NotificationType.progress
    supports-dont-show-again: bool,
    unread: bool,
    button-clicked: bool,  // Set by UI, handled in backend
    dismissed: bool,  // Set by UI, handled in backend
    dont-show-again: bool,  // Set by UI, handled in backend
}

// Tree view item actions
export enum TreeViewItemAction {
    none,
    open,
    delete,
    new-folder,
    new-project,
}

// Generic tree view item data structure
export struct TreeViewItemData {
    level: int,  // 0 = top level items
    icon: image,
    text: string,
    hint: string,
    user-data: string,  // User data to uniquely reference this item
    is-project-file-or-folder: bool,
    has-children: bool,
    expanded: bool,
    supports-pinning: bool,
    pinned: bool,
    action: TreeViewItemAction,  // Set by UI, handled in backend
}

// Library actions
export enum LibraryAction {
    none,
    open,
    uninstall,
}

// Workspace library data structure
export struct LibraryData {
    uuid: string,
    path: string,  // Empty if not installed
    icon: image,
    name: string,
    description: string,
    installed-version: string,  // Empty if not installed
    online-version: string,  // Empty if not a remote library
    outdated: bool,  // Only for outdated remote libraries
    recommended: bool,
    progress: int,  // [%], 0 if not installing
    checked: bool,
    highlight: bool,
    action: LibraryAction,  // Set by UI, handled in backend
}

// Metadata for a list of LibraryData
export struct LibraryListData {
    refreshing: bool,  // Only for remote libraries (async operation)
    refreshing-error: string,
    count: int,  // Count before filtering
    installed: int,  // Only for remote libraries
    outdated: int,  // Only for remote libraries
    all-up-to-date: bool,  // Only for remote libraries
    pending-installs: int,  // Only for remote libraries
    pending-updates: int,  // Only for remote libraries
    pending-uninstalls: int,  // // Only for remote libraries
    pending-oneway-uninstalls: int,  // Only for remote libraries
    operation-in-progress: bool,
    operation-error: string,
}
